ENKRYPT SECURE MCP GATEWAY CLI - COMPREHENSIVE TEST REFERENCE
===============================================================================

TOTAL TESTS: ~210+ command variations

===============================================================================
TEST CATEGORIES & COMMAND COVERAGE
===============================================================================

1. SETUP COMMANDS (4 tests)
2. CONFIG COMMANDS (50+ tests) - INCLUDING GUARDRAILS
3. PROJECT COMMANDS (20+ tests)
4. USER COMMANDS (30+ tests)
5. SYSTEM COMMANDS (5+ tests)
6. ERROR SCENARIOS (25+ tests) - INCLUDING GUARDRAILS ERRORS
7. COMPLEX WORKFLOWS (31+ tests) - INCLUDING GUARDRAILS WORKFLOWS
8. HELP COMMANDS (13+ tests) - INCLUDING GUARDRAILS HELP
9. CLEANUP COMMANDS (36+ tests)

NOTE: We can use `secure-mcp-gateway` instead of `python cli.py` in the commands below.

===============================================================================
1. SETUP COMMANDS TESTED (4 tests)
===============================================================================

‚úÖ python cli.py generate-config
‚úÖ python cli.py install --client claude-desktop
‚úÖ python cli.py install --client cursor

===============================================================================
2. CONFIG COMMANDS TESTED (50+ tests)
===============================================================================

BASIC CONFIG OPERATIONS:
------------------------
‚úÖ python cli.py config list
‚úÖ python cli.py config add --config-name "test-config-1"
‚úÖ python cli.py config add --config-name "test-config-2"
‚úÖ python cli.py config add --config-name "production-config"
‚úÖ python cli.py config add --config-name "development-config"
‚úÖ python cli.py config copy --source-config "test-config-1" --target-config "test-config-copy"
‚úÖ python cli.py config rename --config-name "test-config-copy" --new-name "test-config-renamed"
‚úÖ python cli.py config get --config-name "test-config-1"

ID-BASED CONFIG OPERATIONS:
----------------------------
‚úÖ python cli.py config get --config-id {config-id}
‚úÖ python cli.py config rename --config-id {config-id} --new-name "test-config-1-renamed"
‚úÖ python cli.py config list-servers --config-id {config-id}
‚úÖ python cli.py config remove-server --config-id {config-id} --server-name "server-name"

BASIC SERVER MANAGEMENT:
-------------------------
‚úÖ python cli.py config add-server --config-name "test-config-1" --server-name "test-server-1" --server-command "python" --args "test.py" --description "Test server"
‚úÖ python cli.py config add-server --config-name "test-config-1" --server-name "test-server-2" --server-command "node" --args "app.js" --description "Node server"
‚úÖ python cli.py config list-servers --config-name "test-config-1"
‚úÖ python cli.py config get-server --config-name "test-config-1" --server-name "test-server-1"
‚úÖ python cli.py config update-server --config-name "test-config-1" --server-name "test-server-1" --description "Updated test server"
‚úÖ python cli.py config remove-server --config-name "test-config-1" --server-name "test-server-2"
‚úÖ python cli.py config remove-all-servers --config-name "test-config-2"

ADVANCED SERVER CONFIGURATIONS:
--------------------------------
‚úÖ python cli.py config add-server --config-name "development-config" --server-name "db-server" --server-command "python" --args "db.py" --env '{"DB_HOST": "localhost", "DB_PORT": "5432", "DEBUG": "true"}' --description "Database server with env vars"

‚úÖ python cli.py config add-server --config-name "development-config" --server-name "tool-server" --server-command "python" --args "tools.py" --tools '{"search": {"enabled": true}, "calculator": {"enabled": false}, "file_reader": {"enabled": true}}' --description "Tool server with specific tools"

‚úÖ python cli.py config add-server --config-name "production-config" --server-name "secure-input-server" --server-command "python" --args "secure.py" --input-guardrails-policy '{"enabled": true, "policy_name": "Input Security Policy", "additional_config": {"pii_redaction": true, "content_filtering": true}, "block": ["policy_violation", "injection_attack", "malicious_input"]}' --description "Server with input guardrails"

‚úÖ python cli.py config add-server --config-name "production-config" --server-name "secure-output-server" --server-command "python" --args "secure_output.py" --output-guardrails-policy '{"enabled": true, "policy_name": "Output Security Policy", "additional_config": {"relevancy": true, "hallucination": true, "adherence": true, "toxicity_filter": true}, "block": ["policy_violation", "injection_attack", "harmful_content"]}' --description "Server with output guardrails"

‚úÖ python cli.py config add-server --config-name "production-config" --server-name "fully-secure-server" --server-command "python" --args "fully_secure.py" --input-guardrails-policy {input-guardrails} --output-guardrails-policy {output-guardrails} --description "Fully secured server"

‚úÖ python cli.py config add-server --config-name "production-config" --server-name "complex-server" --server-command "python" --args "complex.py" --env '{"API_KEY": "secret", "ENVIRONMENT": "production", "LOG_LEVEL": "INFO"}' --tools '{"web_search": {"enabled": true}, "code_interpreter": {"enabled": false}, "file_system": {"enabled": true, "read_only": true}}' --input-guardrails-policy {input-guardrails} --description "Complex server configuration"

ADVANCED SERVER UPDATES:
-------------------------
‚úÖ python cli.py config update-server --config-name "development-config" --server-name "tool-server" --tools '{"search": {"enabled": true}, "calculator": {"enabled": true}, "summarizer": {"enabled": false}}'

‚úÖ python cli.py config update-server --config-name "development-config" --server-name "db-server" --env '{"DB_HOST": "remote-db", "DB_PORT": "5433", "DEBUG": "false", "CACHE_ENABLED": "true"}'

üõ°Ô∏è GUARDRAILS POLICY UPDATES (NEW):
=====================================

INPUT GUARDRAILS UPDATES:
--------------------------
‚úÖ python cli.py config update-server-input-guardrails --config-name "production-config" --server-name "secure-input-server" --policy '{"enabled": true, "policy_name": "Custom Input Policy", "additional_config": {"pii_redaction": true}, "block": ["policy_violation"]}'

‚úÖ python cli.py config update-server-input-guardrails --config-name "production-config" --server-name "fully-secure-server" --policy-file "input_policy.json"

‚úÖ python cli.py config update-server-input-guardrails --config-id {config-id} --server-name "secure-input-server" --policy-file "input_policy.json"

OUTPUT GUARDRAILS UPDATES:
---------------------------
‚úÖ python cli.py config update-server-output-guardrails --config-name "production-config" --server-name "secure-output-server" --policy '{"enabled": true, "policy_name": "Custom Output Policy", "additional_config": {"relevancy": true, "hallucination": true, "adherence": true}, "block": ["policy_violation"]}'

‚úÖ python cli.py config update-server-output-guardrails --config-name "production-config" --server-name "fully-secure-server" --policy-file "output_policy.json"

‚úÖ python cli.py config update-server-output-guardrails --config-id {config-id} --server-name "secure-output-server" --policy-file "output_policy.json"

COMBINED GUARDRAILS UPDATES:
-----------------------------
‚úÖ python cli.py config update-server-guardrails --config-name "production-config" --server-name "complex-server" --input-policy '{"enabled": true, "policy_name": "Custom Input Policy", "additional_config": {"pii_redaction": true}, "block": ["policy_violation"]}' --output-policy '{"enabled": true, "policy_name": "Custom Output Policy", "additional_config": {"relevancy": true, "hallucination": true, "adherence": true}, "block": ["policy_violation"]}'

‚úÖ python cli.py config update-server-guardrails --config-name "production-config" --server-name "fully-secure-server" --input-policy-file "input_policy.json" --output-policy-file "output_policy.json"

PARTIAL GUARDRAILS UPDATES:
----------------------------
‚úÖ python cli.py config update-server-guardrails --config-name "production-config" --server-name "secure-input-server" --input-policy-file "input_policy.json"

‚úÖ python cli.py config update-server-guardrails --config-name "production-config" --server-name "secure-output-server" --output-policy-file "output_policy.json"

‚úÖ python cli.py config update-server-guardrails --config-id {config-id} --server-name "complex-server" --input-policy '{"enabled": true, "policy_name": "Updated Policy", "additional_config": {"pii_redaction": false}, "block": ["policy_violation"]}'

CONFIG VALIDATION & EXPORT:
----------------------------
‚úÖ python cli.py config list-projects --config-name "test-config-1"
‚úÖ python cli.py config validate --config-name "test-config-1"
‚úÖ python cli.py config validate --config-name "development-config"
‚úÖ python cli.py config validate --config-name "production-config"
‚úÖ python cli.py config export --config-name "test-config-1" --output-file "config-export.json"
‚úÖ python cli.py config export --config-name "production-config" --output-file "production-config-export.json"
‚úÖ python cli.py config import --input-file "config-export.json" --config-name "imported-config"

CONFIG SEARCH:
--------------
‚úÖ python cli.py config search --search-term "test"
‚úÖ python cli.py config search --search-term "production"
‚úÖ python cli.py config search --search-term "secure"

===============================================================================
3. PROJECT COMMANDS TESTED (20+ tests)
===============================================================================

BASIC PROJECT OPERATIONS:
--------------------------
‚úÖ python cli.py project list
‚úÖ python cli.py project create --project-name "test-project-1"
‚úÖ python cli.py project create --project-name "test-project-2"
‚úÖ python cli.py project create --project-name "Development"
‚úÖ python cli.py project create --project-name "Production"
‚úÖ python cli.py project get --project-name "test-project-1"

ID-BASED PROJECT OPERATIONS:
-----------------------------
‚úÖ python cli.py project get --project-id {project-id}

CONFIG ASSIGNMENT:
------------------
‚úÖ python cli.py project assign-config --project-name "test-project-1" --config-name "test-config-1"
‚úÖ python cli.py project assign-config --project-name "Development" --config-name "development-config"
‚úÖ python cli.py project assign-config --project-name "Production" --config-name "production-config"
‚úÖ python cli.py project assign-config --project-id {project-id} --config-id {config-id}
‚úÖ python cli.py project get-config --project-name "test-project-1"
‚úÖ python cli.py project get-config --project-name "Development"
‚úÖ python cli.py project get-config --project-name "Production"
‚úÖ python cli.py project unassign-config --project-name "test-project-2"

USER MANAGEMENT:
----------------
‚úÖ python cli.py project list-users --project-name "test-project-1"
‚úÖ python cli.py project add-user --project-name "test-project-1" --email "test-user-1@example.com"
‚úÖ python cli.py project add-user --project-name "test-project-1" --email "updated-user-2@example.com"
‚úÖ python cli.py project add-user --project-name "Development" --email "dev@example.com"
‚úÖ python cli.py project add-user --project-name "Production" --email "prod@example.com"
‚úÖ python cli.py project add-user --project-id {project-id} --user-id {user-id}
‚úÖ python cli.py project remove-user --project-name "test-project-1" --email "updated-user-2@example.com"
‚úÖ python cli.py project remove-all-users --project-name "test-project-2"

EXPORT & SEARCH:
----------------
‚úÖ python cli.py project export --project-name "test-project-1" --output-file "project-export.json"
‚úÖ python cli.py project export --project-name "Production" --output-file "production-project-export.json"
‚úÖ python cli.py project search --search-term "test"
‚úÖ python cli.py project search --search-term "Development"
‚úÖ python cli.py project search --search-term "Production"

===============================================================================
4. USER COMMANDS TESTED (30+ tests)
===============================================================================

BASIC USER OPERATIONS:
-----------------------
‚úÖ python cli.py user list
‚úÖ python cli.py user create --email "test-user-1@example.com"
‚úÖ python cli.py user create --email "test-user-2@example.com"
‚úÖ python cli.py user create --email "dev@example.com"
‚úÖ python cli.py user create --email "prod@example.com"
‚úÖ python cli.py user create --email "admin@company.com"
‚úÖ python cli.py user get --email "test-user-1@example.com"
‚úÖ python cli.py user update --email "test-user-2@example.com" --new-email "updated-user-2@example.com"
‚úÖ python cli.py user list-projects --email "test-user-1@example.com"

ID-BASED USER OPERATIONS:
--------------------------
‚úÖ python cli.py user get --user-id {user-id}
‚úÖ python cli.py user update --user-id {user-id} --new-email "admin-updated@company.com"

API KEY MANAGEMENT:
-------------------
‚úÖ python cli.py user generate-api-key --email "test-user-1@example.com" --project-name "test-project-1"
‚úÖ python cli.py user generate-api-key --email "dev@example.com" --project-name "Development"
‚úÖ python cli.py user generate-api-key --email "prod@example.com" --project-name "Production"
‚úÖ python cli.py user generate-api-key --user-id {user-id} --project-id {project-id}

API KEY LISTING:
----------------
‚úÖ python cli.py user list-api-keys --email "test-user-1@example.com"
‚úÖ python cli.py user list-api-keys --email "dev@example.com"
‚úÖ python cli.py user list-api-keys --email "prod@example.com"
‚úÖ python cli.py user list-api-keys --user-id {user-id}
‚úÖ python cli.py user list-api-keys --email "test-user-1@example.com" --project-name "test-project-1"
‚úÖ python cli.py user list-api-keys --email "dev@example.com" --project-name "Development"
‚úÖ python cli.py user list-all-api-keys

API KEY LIFECYCLE:
------------------
‚úÖ python cli.py user disable-api-key --api-key {api-key}
‚úÖ python cli.py user enable-api-key --api-key {api-key}
‚úÖ python cli.py user rotate-api-key --api-key {api-key}
‚úÖ python cli.py user delete-api-key --api-key {api-key}
‚úÖ python cli.py user delete-all-api-keys --email "updated-user-2@example.com"
‚úÖ python cli.py user delete-all-api-keys --email "dev@example.com"

USER SEARCH & DELETION:
------------------------
‚úÖ python cli.py user search --search-term "test"
‚úÖ python cli.py user search --search-term "admin"
‚úÖ python cli.py user search --search-term "example.com"
‚úÖ python cli.py user delete --email "admin-updated@company.com" --force

===============================================================================
5. SYSTEM COMMANDS TESTED (5+ tests)
===============================================================================

SYSTEM OPERATIONS:
------------------
‚úÖ python cli.py system health-check
‚úÖ python cli.py system backup --output-file "system-backup.json"
‚úÖ python cli.py system backup --output-file "pre-restore-backup.json"
‚úÖ python cli.py system restore --input-file "system-backup.json"
‚úÖ python cli.py system health-check (after restore)

NOTE: system reset --confirm is not tested to preserve test data

===============================================================================
6. ERROR SCENARIOS TESTED (25+ tests) - INCLUDING GUARDRAILS ERRORS
===============================================================================

NON-EXISTENT RESOURCE ACCESS:
------------------------------
‚ùå python cli.py config get --config-name "non-existent-config" (expected to fail)
‚ùå python cli.py project get --project-name "non-existent-project" (expected to fail)
‚ùå python cli.py user get --email "non-existent@example.com" (expected to fail)

DUPLICATE CREATION:
-------------------
‚ùå python cli.py config add --config-name "test-config-1" (expected to fail)
‚ùå python cli.py project create --project-name "test-project-1" (expected to fail)
‚ùå python cli.py user create --email "test-user-1@example.com" (expected to fail)

CONSTRAINT VIOLATIONS:
----------------------
‚ùå python cli.py config remove --config-name "test-config-1" (expected to fail - in use)
‚ùå python cli.py user delete --email "prod@example.com" (expected to fail - has API keys)
‚ùå python cli.py project remove --project-name "Production" (expected to fail - has users)

INVALID CONFIGURATIONS:
------------------------
‚ùå python cli.py config add-server --config-name "non-existent-config" --server-name "test" --server-command "python" --args "test.py" (expected to fail)
‚ùå python cli.py config add-server --config-name "test-config-renamed" --server-name "bad-json-server" --server-command "python" --args "test.py" --env "invalid-json" (expected to fail)

üõ°Ô∏è GUARDRAILS ERROR SCENARIOS (NEW):
=====================================
‚ùå python cli.py config update-server-input-guardrails --config-name "non-existent-config" --server-name "test-server" --policy '{"enabled": true}' (expected to fail)
‚ùå python cli.py config update-server-input-guardrails --config-name "test-config-1" --server-name "non-existent-server" --policy '{"enabled": true}' (expected to fail)
‚ùå python cli.py config update-server-input-guardrails --config-name "test-config-1" --server-name "test-server-1" --policy "invalid-json" (expected to fail)
‚ùå python cli.py config update-server-input-guardrails --config-name "test-config-1" --server-name "test-server-1" (expected to fail - missing policy)
‚ùå python cli.py config update-server-input-guardrails --config-name "test-config-1" --server-name "test-server-1" --policy '{"enabled": true}' --policy-file "input_policy.json" (expected to fail - both provided)

MISSING ARGUMENTS:
------------------
‚ùå python cli.py config add (expected to fail)
‚ùå python cli.py project create (expected to fail)
‚ùå python cli.py user create (expected to fail)

INVALID API OPERATIONS:
-----------------------
‚ùå python cli.py user rotate-api-key --api-key "invalid-key-format" (expected to fail)
‚ùå python cli.py user delete-api-key --api-key "invalid-key-format" (expected to fail)

FILE OPERATIONS:
----------------
‚ùå python cli.py config import --input-file "non-existent-file.json" --config-name "test" (expected to fail)
‚ùå python cli.py system restore --input-file "non-existent-backup.json" (expected to fail)

INVALID ID FORMATS:
-------------------
‚ùå python cli.py config get --config-id "invalid-uuid" (expected to fail)
‚ùå python cli.py project get --project-id "invalid-uuid" (expected to fail)
‚ùå python cli.py user get --user-id "invalid-uuid" (expected to fail)

===============================================================================
7. COMPLEX WORKFLOWS TESTED (31+ tests) - INCLUDING GUARDRAILS WORKFLOWS
===============================================================================

MIGRATION WORKFLOW:
-------------------
‚úÖ python cli.py system backup --output-file "pre-migration-backup.json"
‚úÖ python cli.py config copy --source-config "production-config" --target-config "new-production-config"
‚úÖ python cli.py config validate --config-name "new-production-config"
‚úÖ python cli.py project create --project-name "New-Production"
‚úÖ python cli.py project assign-config --project-name "New-Production" --config-name "new-production-config"
‚úÖ python cli.py system health-check

TEAM MANAGEMENT WORKFLOW:
--------------------------
‚úÖ python cli.py user create --email "team-lead@example.com"
‚úÖ python cli.py user create --email "developer-1@example.com"
‚úÖ python cli.py user create --email "developer-2@example.com"
‚úÖ python cli.py project add-user --project-name "New-Production" --email "team-lead@example.com"
‚úÖ python cli.py project add-user --project-name "New-Production" --email "developer-1@example.com"
‚úÖ python cli.py project add-user --project-name "New-Production" --email "developer-2@example.com"
‚úÖ python cli.py user generate-api-key --email "team-lead@example.com" --project-name "New-Production"
‚úÖ python cli.py user generate-api-key --email "developer-1@example.com" --project-name "New-Production"
‚úÖ python cli.py user generate-api-key --email "developer-2@example.com" --project-name "New-Production"

CONFIGURATION MANAGEMENT WORKFLOW:
-----------------------------------
‚úÖ python cli.py config add --config-name "staging-config"
‚úÖ python cli.py config add-server --config-name "staging-config" --server-name "staging-web" --server-command "python" --args "web.py" --env '{"ENVIRONMENT": "staging", "LOG_LEVEL": "DEBUG"}' --description "Staging web server"
‚úÖ python cli.py config add-server --config-name "staging-config" --server-name "staging-tools" --server-command "python" --args "tools.py" --tools '{"web_search": {"enabled": true}, "file_system": {"enabled": true}}' --description "Staging tools server"
‚úÖ python cli.py config add-server --config-name "staging-config" --server-name "staging-secure" --server-command "python" --args "secure.py" --input-guardrails-policy '{"enabled": true, "policy_name": "Staging Policy", "additional_config": {"content_filtering": false}, "block": ["injection_attack"]}' --description "Staging secure server"
‚úÖ python cli.py config validate --config-name "staging-config"
‚úÖ python cli.py config export --config-name "staging-config" --output-file "staging-config-export.json"

üõ°Ô∏è GUARDRAILS MANAGEMENT WORKFLOW (NEW):
==========================================
‚úÖ python cli.py config add-server --config-name "staging-config" --server-name "security-test-server" --server-command "python" --args "security.py" --description "Security testing server"
‚úÖ python cli.py config update-server-input-guardrails --config-name "staging-config" --server-name "security-test-server" --policy-file "enhanced_input_policy.json"
‚úÖ python cli.py config update-server-output-guardrails --config-name "staging-config" --server-name "security-test-server" --policy-file "enhanced_output_policy.json"
‚úÖ python cli.py config update-server-guardrails --config-name "staging-config" --server-name "security-test-server" --input-policy '{"enabled": true, "policy_name": "Updated Input Policy", "additional_config": {"pii_redaction": false, "content_filtering": true}, "block": ["policy_violation"]}' --output-policy '{"enabled": true, "policy_name": "Updated Output Policy", "additional_config": {"relevancy": false, "hallucination": true, "adherence": true}, "block": ["policy_violation", "hallucination"]}'
‚úÖ python cli.py config get-server --config-name "staging-config" --server-name "security-test-server"
‚úÖ python cli.py config validate --config-name "staging-config"
‚úÖ python cli.py config export --config-name "staging-config" --output-file "staging-config-with-guardrails.json"
‚úÖ python cli.py system health-check

===============================================================================
8. HELP COMMANDS TESTED (13+ tests) - INCLUDING GUARDRAILS HELP
===============================================================================

GENERAL HELP:
-------------
‚úÖ python cli.py --help

COMMAND GROUP HELP:
-------------------
‚úÖ python cli.py config --help
‚úÖ python cli.py project --help
‚úÖ python cli.py user --help
‚úÖ python cli.py system --help

SPECIFIC COMMAND HELP:
----------------------
‚úÖ python cli.py config add --help
‚úÖ python cli.py config add-server --help
‚úÖ python cli.py user generate-api-key --help
‚úÖ python cli.py project create --help
‚úÖ python cli.py system backup --help

üõ°Ô∏è GUARDRAILS COMMAND HELP (NEW):
===================================
‚úÖ python cli.py config update-server-input-guardrails --help
‚úÖ python cli.py config update-server-output-guardrails --help
‚úÖ python cli.py config update-server-guardrails --help

===============================================================================
9. CLEANUP COMMANDS TESTED (36+ tests)
===============================================================================

API KEY CLEANUP:
----------------
‚úÖ python cli.py user delete-all-api-keys --email {email} (for multiple users)

USER CLEANUP:
-------------
‚úÖ python cli.py project remove-all-users --project-name {project-name} (for multiple projects)
‚úÖ python cli.py user delete --email {email} --force (for multiple users)

PROJECT CLEANUP:
-----------------
‚úÖ python cli.py project unassign-config --project-name {project-name} (for multiple projects)
‚úÖ python cli.py project remove --project-name {project-name} (for multiple projects)

CONFIG CLEANUP:
---------------
‚úÖ python cli.py config remove-all-servers --config-name {config-name} (for multiple configs)
‚úÖ python cli.py config remove --config-name {config-name} (for multiple configs)

FINAL VALIDATION:
-----------------
‚úÖ python cli.py system health-check

===============================================================================
ADVANCED FEATURES TESTED
===============================================================================

SERVER CONFIGURATIONS:
-----------------------
‚úÖ Environment Variables: --env '{"KEY": "value"}'
‚úÖ Tools Configuration: --tools '{"tool": {"enabled": true}}'
‚úÖ Input Guardrails: --input-guardrails-policy '{"enabled": true, ...}'
‚úÖ Output Guardrails: --output-guardrails-policy '{"enabled": true, ...}'
‚úÖ Complex Combinations: Multiple features on single server

üõ°Ô∏è GUARDRAILS POLICY MANAGEMENT (NEW):
========================================
‚úÖ Input Guardrails Updates: --policy (JSON string) & --policy-file (JSON file)
‚úÖ Output Guardrails Updates: --policy (JSON string) & --policy-file (JSON file)
‚úÖ Combined Guardrails Updates: --input-policy & --output-policy
‚úÖ Partial Guardrails Updates: Input only or Output only
‚úÖ Config ID Support: --config-id for guardrails operations
‚úÖ Error Handling: Invalid configs, servers, JSON, missing policies
‚úÖ Policy File Management: Creation and validation of JSON policies

ID-BASED OPERATIONS:
--------------------
‚úÖ Config operations with --config-id
‚úÖ Project operations with --project-id
‚úÖ User operations with --user-id
‚úÖ Cross-reference operations with multiple IDs
‚úÖ Guardrails operations with --config-id

ERROR HANDLING:
---------------
‚úÖ Non-existent resource access
‚úÖ Duplicate creation attempts
‚úÖ Constraint violations
‚úÖ Invalid JSON configurations
‚úÖ Missing required arguments
‚úÖ Invalid formats and data
‚úÖ Guardrails-specific errors (invalid policy, missing parameters)

WORKFLOW TESTING:
-----------------
‚úÖ Migration scenarios
‚úÖ Team management
‚úÖ Configuration management
‚úÖ Multi-step operations
‚úÖ Cross-resource dependencies
‚úÖ Guardrails management workflows

===============================================================================
TEST ARTIFACTS CREATED
===============================================================================

CONFIG EXPORTS:
---------------
- config-export.json
- production-config-export.json
- staging-config-export.json
- staging-config-with-guardrails.json

PROJECT EXPORTS:
----------------
- project-export.json
- production-project-export.json

SYSTEM BACKUPS:
---------------
- system-backup.json
- pre-restore-backup.json
- pre-migration-backup.json

üõ°Ô∏è POLICY FILES (NEW):
=======================
- input_policy.json (basic input policy)
- output_policy.json (basic output policy)
===============================================================================
EXAMPLE POLICY FILES
===============================================================================

INPUT_POLICY.JSON:
------------------
{
  "enabled": true,
  "policy_name": "Test Input Policy",
  "additional_config": {
    "pii_redaction": true,
    "content_filtering": true
  },
  "block": ["policy_violation", "sensitive_data"]
}

OUTPUT_POLICY.JSON:
-------------------
{
  "enabled": true,
  "policy_name": "Test Output Policy",
  "additional_config": {
    "relevancy": true,
    "hallucination": true,
    "adherence": true
  },
  "block": ["policy_violation", "hallucination"]
}


===============================================================================
COVERAGE SUMMARY
===============================================================================

COMMAND CATEGORIES:
-------------------
- Setup Commands: 100% coverage (4/4)
- Config Commands: 100% coverage (50+/50+) INCLUDING GUARDRAILS
- Project Commands: 100% coverage (20+/20+)
- User Commands: 100% coverage (30+/30+)
- System Commands: 100% coverage (5+/5+, except destructive reset)
- Error Scenarios: 100% coverage (25+/25+) INCLUDING GUARDRAILS ERRORS
- Complex Workflows: 100% coverage (31+/31+) INCLUDING GUARDRAILS WORKFLOWS
- Help Commands: 100% coverage (13+/13+) INCLUDING GUARDRAILS HELP

ADVANCED FEATURES:
------------------
- Environment Variables: ‚úÖ Tested
- Tools Configuration: ‚úÖ Tested
- Input Guardrails: ‚úÖ Tested
- Output Guardrails: ‚úÖ Tested
- Complex Server Configs: ‚úÖ Tested
- ID-Based Operations: ‚úÖ Tested
- Error Scenarios: ‚úÖ Tested
- Multi-Step Workflows: ‚úÖ Tested

üõ°Ô∏è NEW GUARDRAILS FEATURES:
============================
- Input Guardrails Updates (JSON String): ‚úÖ Tested
- Input Guardrails Updates (JSON File): ‚úÖ Tested
- Output Guardrails Updates (JSON String): ‚úÖ Tested
- Output Guardrails Updates (JSON File): ‚úÖ Tested
- Combined Guardrails Updates: ‚úÖ Tested
- Partial Guardrails Updates: ‚úÖ Tested
- Config ID-based Guardrails Ops: ‚úÖ Tested
- Guardrails Error Scenarios: ‚úÖ Tested
- Guardrails Management Workflow: ‚úÖ Tested
- Policy File Creation/Management: ‚úÖ Tested

TOTAL COMMANDS TESTED: ~210+
SUCCESS CRITERIA: All commands execute without unexpected failures
ERROR HANDLING: All expected failures properly handled
GUARDRAILS COVERAGE: Complete coverage of all guardrails update operations

===============================================================================
GUARDRAILS COMMAND QUICK REFERENCE
===============================================================================

INPUT GUARDRAILS UPDATE:
------------------------
python cli.py config update-server-input-guardrails --config-name <config> --server-name <server> --policy <json-string>
python cli.py config update-server-input-guardrails --config-name <config> --server-name <server> --policy-file <file.json>
python cli.py config update-server-input-guardrails --config-id <id> --server-name <server> --policy-file <file.json>

OUTPUT GUARDRAILS UPDATE:
-------------------------
python cli.py config update-server-output-guardrails --config-name <config> --server-name <server> --policy <json-string>
python cli.py config update-server-output-guardrails --config-name <config> --server-name <server> --policy-file <file.json>
python cli.py config update-server-output-guardrails --config-id <id> --server-name <server> --policy-file <file.json>

COMBINED GUARDRAILS UPDATE:
---------------------------
python cli.py config update-server-guardrails --config-name <config> --server-name <server> --input-policy <json> --output-policy <json>
python cli.py config update-server-guardrails --config-name <config> --server-name <server> --input-policy-file <file> --output-policy-file <file>
python cli.py config update-server-guardrails --config-name <config> --server-name <server> --input-policy-file <file>  # Input only
python cli.py config update-server-guardrails --config-name <config> --server-name <server> --output-policy-file <file>  # Output only

===============================================================================
CROSS-PLATFORM COMPATIBILITY
===============================================================================

PLATFORMS TESTED:
------------------
‚úÖ Windows: Uses 'python' command with proper JSON escaping
‚úÖ Linux/Ubuntu: Uses 'python3' command with proper JSON escaping
‚úÖ macOS: Uses 'python3' command with proper JSON escaping
‚úÖ Auto-detection: Automatically detects correct Python executable

JSON HANDLING:
--------------
‚úÖ Windows CMD: Uses double quotes with escaping
‚úÖ Windows PowerShell: Uses single quotes or variables
‚úÖ Linux/macOS Bash: Uses single quotes
‚úÖ File-based: Cross-platform JSON file support

GUARDRAILS JSON EXAMPLES FOR DIFFERENT PLATFORMS:
--------------------------------------------------

WINDOWS CMD:
python cli.py config update-server-input-guardrails --config-name "production-config" --server-name "echo_server" --policy "{\"enabled\": true, \"policy_name\": \"Custom Policy\", \"additional_config\": {\"pii_redaction\": true}, \"block\": [\"policy_violation\", \"sensitive_data\"]}"

WINDOWS POWERSHELL:
$policy = '{"enabled": true, "policy_name": "Custom Policy", "additional_config": {"pii_redaction": true}, "block": ["policy_violation", "sensitive_data"]}'
python cli.py config update-server-input-guardrails --config-name "production-config" --server-name "echo_server" --policy $policy

LINUX/MACOS BASH:
python cli.py config update-server-input-guardrails --config-name 'production-config' --server-name 'echo_server' --policy '{"enabled": true, "policy_name": "Custom Policy", "additional_config": {"pii_redaction": true}, "block": ["policy_violation", "sensitive_data"]}'

FILE-BASED (ALL PLATFORMS):
python cli.py config update-server-input-guardrails --config-name "production-config" --server-name "echo_server" --policy-file "input_policy.json"

===============================================================================
TROUBLESHOOTING GUIDE
===============================================================================

COMMON ISSUES & SOLUTIONS:
---------------------------

ISSUE: "Config 'name' not found"
SOLUTION: python cli.py config list  # to see available configs

ISSUE: "Server 'name' not found in config"
SOLUTION: python cli.py config list-servers --config-name <config>  # to see available servers

ISSUE: "Invalid JSON for guardrails policy"
SOLUTION:
- Use policy files instead of JSON strings
- Validate JSON syntax in a JSON validator
- Use proper escaping for your platform

ISSUE: "Cannot specify both --policy and --policy-file"
SOLUTION: Use either JSON string OR file, not both

ISSUE: "Missing policy parameter"
SOLUTION: Provide either --policy or --policy-file for single updates, or at least one policy for combined updates

GUARDRAILS-SPECIFIC TROUBLESHOOTING:
------------------------------------

ERROR: update-server-input-guardrails command not found
SOLUTION: Ensure you have the latest CLI version with guardrails commands

ERROR: Policy validation failed
SOLUTION: Check policy structure matches expected format:
{
 "enabled": boolean,
 "policy_name": "string",
 "additional_config": { ... },
 "block": ["array", "of", "strings"]
}

ERROR: Server not found for guardrails update
SOLUTION:
1. Verify server exists: python cli.py config get-server --config-name <config> --server-name <server>
2. Check server was created with proper name spelling

===============================================================================
BEST PRACTICES
===============================================================================

GUARDRAILS MANAGEMENT:
----------------------
1. Use descriptive policy names for easier identification
2. Test guardrails policies in staging before production
3. Use policy files for complex configurations
4. Version control your policy files
5. Validate configurations after guardrails updates
6. Regular backups before major guardrails changes

POLICY FILE ORGANIZATION:
-------------------------
- input_policies/
 - basic_input.json
 - strict_input.json
 - staging_input.json
- output_policies/
 - basic_output.json
 - strict_output.json
 - staging_output.json

WORKFLOW RECOMMENDATIONS:
-------------------------
1. Create and test policy files first
2. Apply to staging servers for testing
3. Validate server configurations
4. Export configurations for backup
5. Apply to production servers
6. Monitor and adjust as needed

SECURITY CONSIDERATIONS:
------------------------
- Enable appropriate guardrails for production environments
- Use stricter policies for sensitive data processing
- Regular review and update of guardrails policies
- Test edge cases with your specific use cases
- Monitor guardrails effectiveness through logs

===============================================================================
USAGE INSTRUCTIONS
===============================================================================

FOR TESTING:
------------
1. Save the test file as: test_all_commands_enhanced_guardrails.py
2. Ensure cli.py is in the same directory or use secure-mcp-gateway command
3. Run: python test_all_commands_enhanced_guardrails.py
4. Review the detailed output and summary
5. Check created artifacts including policy files
6. Original configuration is automatically restored

FOR PRODUCTION USE:
-------------------
1. Create your policy JSON files using the examples above
2. Test commands in a development environment first
3. Use file-based policies for complex configurations
4. Always backup before making changes: python cli.py system backup --output-file backup.json
5. Validate after changes: python cli.py config validate --config-name <config>
6. Monitor system health: python cli.py system health-check

===============================================================================
COMMAND SUMMARY BY CATEGORY
===============================================================================

SETUP: 4 commands
CONFIG (BASIC): 20+ commands
CONFIG (SERVERS): 15+ commands
CONFIG (GUARDRAILS): 12+ commands ‚≠ê NEW
CONFIG (MANAGEMENT): 10+ commands
PROJECT: 20+ commands
USER (BASIC): 15+ commands
USER (API KEYS): 15+ commands
SYSTEM: 5+ commands
ERRORS: 25+ commands (including 5+ guardrails errors) ‚≠ê NEW
WORKFLOWS: 31+ commands (including 8+ guardrails workflow) ‚≠ê NEW
HELP: 13+ commands (including 3+ guardrails help) ‚≠ê NEW
CLEANUP: 36+ commands

TOTAL: ~210+ COMMANDS TESTED

‚≠ê NEW FEATURES:
- 12+ Guardrails update commands
- 5+ Guardrails error scenarios
- 8+ Guardrails workflow commands
- 3+ Guardrails help commands
- 4+ Policy file artifacts
- Cross-platform JSON handling for guardrails
- Comprehensive guardrails management workflows

===============================================================================
END OF COMPREHENSIVE TEST REFERENCE WITH GUARDRAILS
===============================================================================
